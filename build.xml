<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="lgpn-ling" basedir=".">
    <xmlproperty file="expath-pkg.xml"/>
    <xmlproperty file="build.properties.xml" semanticAttributes="true" keepRoot="false"/>
    <property name="project.version" value="${package(version)}"/>
    <property name="project.app" value="lgpn-ling"/>
    <property name="build.dir" value="build"/>

    <target name="all" depends="xar"/>

    <target name="rebuild" depends="clean,all"/>

    <target name="clean" description="Clean output directories">
        <echo message="Deleting xar files..."/>
        <delete>
            <fileset dir="${build.dir}">
                <include name="*.xar"/>
            </fileset>
        </delete>
    </target>

    <available file=".git" type="dir" property="git.present"/>

    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <echo message="git HEAD is at ${repository.version}"/>
    </target>

    <target name="copy">
        <copy todir="${build.dir}/${app.name}-${app.version}">
            <fileset dir="${basedir}" excludes="${build.dir}/**,build.properties.xml,build.xml,README.md,.idea/,.editorconfig,.existdb.json,expath-pkg.xml.tmpl,repo.xml.tmpl,bower_components/**,node_modules/**,package.json,local.node-exist.json,gulpfile.js"/>
        </copy>

        <copy todir="${build.dir}/${app.name}-${app.version}" overwrite="true" verbose="true">
            <fileset file="expath-pkg.xml.tmpl"/>
            <fileset file="repo.xml.tmpl"/>
            <filterset>
                <filter token="name" value="${app.name}"/>
                <filter token="version" value="${app.version}"/>
                <filter token="url" value="${app.url}"/>
                <filter token="description" value="${app.description}"/>
                <filter token="website" value="${app.url}"/>
                <filter token="status" value="${app.status}"/>
                <filter token="permissions" value="${app.permissions}"/>
            </filterset>
            <filterchain>
                <replacetokens>
                    <token key="repository.version" value="${repository.version}" />
                </replacetokens>
            </filterchain>

            <globmapper from="*.tmpl" to="*"/>
        </copy>
    </target>

    <target name="xar" depends="clean,copy,git.revision" description="main target to create application XAR file">
        <mkdir dir="${build.dir}"/>
        <echo message="Calling npm start..."/>
<!--
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="start"/>
        </exec>
        <echo message="${npm.output}"/>
-->
        <echo message="Creating xar package..."/>
        <zip basedir="${build.dir}/${app.name}-${app.version}" destfile="${build.dir}/${app.name}-${app.version}-${repository.version}.xar"/>
    </target>

    <!-- Update all packages and start gulp automation -->
    <target name="update">
        <echo message="Calling npm update..."/>
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="run-script"/>
            <arg line="update"/>
        </exec>
        <echo message="${npm.output}"/>
    </target>

    <!-- Check & install new packages where required and start gulp automation -->
    <target name="start">
        <echo message="Calling npm start..."/>
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="start"/>
        </exec>
        <echo message="${npm.output}"/>
    </target>

    <!-- Start gulp build automation -->
    <target name="gulp" description="Generate output files and sync static files from dependent packages">
        <echo message="Calling gulp ..."/>
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="run-script"/>
            <arg line="gulp"/>
        </exec>
        <echo message="${npm.output}"/>
    </target>

</project>
